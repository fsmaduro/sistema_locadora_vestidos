unit untAcompanhaHistoricoProduto;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxStyles, dxSkinsCore, dxSkinsDefaultPainters, dxSkinscxPCPainter,
  cxCustomData, cxGraphics, cxFilter, cxData, cxDataStorage, cxEdit, DB,
  cxDBData, cxGridLevel, cxClasses, cxControls, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid,
  dxGDIPlusClasses, ExtCtrls, IBCustomDataSet, IBQuery, RxLookup, StdCtrls,
  wwdbdatetimepicker, Menus, cxLookAndFeelPainters, cxButtons, cxCheckBox,
  cxGridExportLink, ShellAPI, dxPSGlbl, dxPSUtl, dxPSEngn, dxPrnPg, dxBkgnd,
  dxWrap, dxPrnDev, dxPSCompsProvider, dxPSFillPatterns, dxPSEdgePatterns,
  dxPSCore, dxPScxCommon, dxPScxGrid6Lnk, DBCtrls, cxButtonEdit, cxTextEdit,
  cxMaskEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox,
  cxContainer, cxGroupBox, untdados;

type
  TfrmAcompanhaHistoricoProduto = class(TForm)
    Panel1: TPanel;
    Image1: TImage;
    Panel2: TPanel;
    dtsPerfil: TDataSource;
    qryPerfil: TIBQuery;
    qryPerfilCODIGO: TIntegerField;
    qryPerfilNOME: TIBStringField;
    cxButton2: TcxButton;
    cxButton3: TcxButton;
    cxButton5: TcxButton;
    qryRegistros: TIBQuery;
    dtsRegistros: TDataSource;
    Panel3: TPanel;
    grdPainel: TcxGrid;
    grdPainelDBTableView1: TcxGridDBTableView;
    grdPainelLevel1: TcxGridLevel;
    Panel4: TPanel;
    cxButton4: TcxButton;
    Panel6: TPanel;
    DBText1: TDBText;
    Panel5: TPanel;
    qryRegistrosDATAHORAINICIO: TDateTimeField;
    qryRegistrosDATAHORAFINAL: TDateTimeField;
    qryRegistrosTIPO: TIntegerField;
    qryRegistrosCODIGOCLIENTE: TIntegerField;
    qryRegistrosNOMECLIENTE: TIBStringField;
    qryRegistrosCODIGOPRODUTO: TIntegerField;
    qryRegistrosNOMEPRODUTO: TIBStringField;
    qryRegistrosCODIGOREGISTRO: TIntegerField;
    qryRegistrosOBSERVACOES: TMemoField;
    grdPainelDBTableView1DATAHORAINICIO: TcxGridDBColumn;
    grdPainelDBTableView1DATAHORAFINAL: TcxGridDBColumn;
    grdPainelDBTableView1NOMETIPO: TcxGridDBColumn;
    grdPainelDBTableView1NOMECLIENTE: TcxGridDBColumn;
    grdPainelDBTableView1CODIGOPRODUTO: TcxGridDBColumn;
    grdPainelDBTableView1NOMEPRODUTO: TcxGridDBColumn;
    grdPainelDBTableView1CODIGOREGISTRO: TcxGridDBColumn;
    grdPainelDBTableView1OBSERVACOES: TcxGridDBColumn;
    qryRegistrosDATAINICIO: TDateField;
    qryRegistrosDATAFIM: TDateField;
    Label27: TLabel;
    cbPerfil: TRxDBLookupCombo;
    edtDtInicial: TwwDBDateTimePicker;
    Label38: TLabel;
    edtDtFinal: TwwDBDateTimePicker;
    Label1: TLabel;
    cxButton1: TcxButton;
    qryRegistrosNOMETIPO: TIBStringField;
    cxButton6: TcxButton;
    qryRegistrosREFERENCIA: TIBStringField;
    grdPainelDBTableView1Column1: TcxGridDBColumn;
    qryRegistrosEXISTEORDEMSERVICO: TIntegerField;
    grdPainelDBTableView1Column2: TcxGridDBColumn;
    cxButton7: TcxButton;
    PopupMenu1: TPopupMenu;
    NovaOS1: TMenuItem;
    SelecionarOS1: TMenuItem;
    cbProduto: TRxDBLookupCombo;
    Label2: TLabel;
    dtsProduto: TDataSource;
    qryProduto: TIBQuery;
    IntegerField1: TIntegerField;
    IBStringField1: TIBStringField;
    qryRegistrosTIPOPECA: TIBStringField;
    grdPainelDBTableView1Column3: TcxGridDBColumn;
    qryRegistrosTIPOSERVICO: TIBStringField;
    grdPainelDBTableView1Column4: TcxGridDBColumn;
    qryPaineis: TIBQuery;
    qryPaineisCODIGO: TIntegerField;
    qryPaineisDATA: TDateField;
    qryPaineisNOMERELATORIO: TIBStringField;
    qryPaineisNOMEARQUIVO: TIBStringField;
    qryPaineisDETALHEARQUIVO: TBlobField;
    qryPaineisTELA: TIBStringField;
    qryPaineisCOMPONENTE: TIBStringField;
    dtsPaineis: TDataSource;
    cxGroupBox1: TcxGroupBox;
    cmbRelatorio1: TcxLookupComboBox;
    btnCriar1: TcxButton;
    btnExcluir1: TcxButton;
    procedure FormActivate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure qryRegistrosBeforeOpen(DataSet: TDataSet);
    procedure cxButton1Click(Sender: TObject);
    procedure cxButton3Click(Sender: TObject);
    procedure cxButton5Click(Sender: TObject);
    procedure Configuraes1Click(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure cxButton4Click(Sender: TObject);
    procedure qryRegistrosAfterScroll(DataSet: TDataSet);
    procedure cxButton6Click(Sender: TObject);
    procedure NovaOS1Click(Sender: TObject);
    procedure btnCriar1Click(Sender: TObject);
    procedure btnExcluir1Click(Sender: TObject);
    procedure cmbRelatorio1Exit(Sender: TObject);
    procedure qryPaineisBeforeOpen(DataSet: TDataSet);
  private
    vDiasUrgente, vDiasAlerta, vDiasMuitoUrgente: Integer;
    function Filtro(): String;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmAcompanhaHistoricoProduto: TfrmAcompanhaHistoricoProduto;

implementation

uses untDtmRelatorios, Funcao, untAcompanhaPedidoAgenda, untAgenda,
  untContrato, untOrdemServico;

const NomeMenu = 'HistricoProduto1';

{$R *.dfm}

procedure TfrmAcompanhaHistoricoProduto.FormActivate(Sender: TObject);
begin
  Try
    dados.Log(1,copy(Caption,17,length(Caption)));
  except
  End;
end;

procedure TfrmAcompanhaHistoricoProduto.btnCriar1Click(Sender: TObject);
begin
  Dados.CriarModeloPainel('frmAcompanhaHistoricoProduto',grdPainelDBTableView1);

  qryPaineis.Close;
  qryPaineis.Open;
end;

procedure TfrmAcompanhaHistoricoProduto.btnExcluir1Click(Sender: TObject);
begin
  if cmbRelatorio1.EditValue > 0 then
  begin
    Dados.ExcluirModeloPainel(cmbRelatorio1.EditValue);

    qryPaineis.Close;
    qryPaineis.Open;
  end;
end;

procedure TfrmAcompanhaHistoricoProduto.cmbRelatorio1Exit(Sender: TObject);
begin
  if cmbRelatorio1.EditValue > 0 then
    Dados.SelecionarModeloPainel(grdPainelDBTableView1,cmbRelatorio1.EditValue);
end;

procedure TfrmAcompanhaHistoricoProduto.Configuraes1Click(Sender: TObject);
begin
 dados.ShowConfig(frmAcompanhaHistoricoProduto);
end;

procedure TfrmAcompanhaHistoricoProduto.cxButton1Click(Sender: TObject);
begin
  qryRegistros.Close;
  qryRegistros.Open;
end;

procedure TfrmAcompanhaHistoricoProduto.cxButton2Click(Sender: TObject);
begin
  ImprimirGrid(grdPainel,'Painel de Histórico de Produtos'+iif(cmbRelatorio1.EditValue > 0,' - '+cmbRelatorio1.Text,''));
end;

procedure TfrmAcompanhaHistoricoProduto.cxButton3Click(Sender: TObject);
begin
  ExportarGrid(grdPainel);
end;

procedure TfrmAcompanhaHistoricoProduto.cxButton4Click(Sender: TObject);
begin
  Case qryRegistrosTIPO.AsInteger of
  
    1: begin

         if Application.FindComponent('frmAgenda') = nil then
           Application.CreateForm(TfrmAgenda, frmAgenda);

         frmAgenda.Show;

         frmAgenda.edtDtInicial.Date := qryRegistrosDATAINICIO.AsDateTime;
         frmAgenda.edtDtFinal.Date := qryRegistrosDATAINICIO.AsDateTime;
         frmAgenda.cxButton1.Click;

         frmAgenda.cxScheduler1.GoToDate(qryRegistrosDATAINICIO.AsDateTime);

       end;

    2: begin
         if Application.FindComponent('frmContrato') = Nil then
           Application.CreateForm(TfrmContrato, frmContrato);

         frmContrato.Show;

         frmContrato.qryContrato.Locate('CODIGO',qryRegistrosCODIGOREGISTRO.AsInteger,[]);
       end;

    3: begin
         if Application.FindComponent('frmOrdemServico') = Nil then
           Application.CreateForm(TfrmOrdemServico, frmOrdemServico);

         frmOrdemServico.pubCodigo := qryRegistrosCODIGOREGISTRO.AsInteger;

         frmOrdemServico.Show;
       end;
  End;

end;

procedure TfrmAcompanhaHistoricoProduto.cxButton5Click(Sender: TObject);
begin
  Close;
end;

procedure TfrmAcompanhaHistoricoProduto.cxButton6Click(Sender: TObject);
var
  cQtdDias : String;
begin

  cQtdDias := Dados.DigitarValor('Quantidade de dias que o produto retornou antecip.:');

  try
    StrToInt(cQtdDias);
  except
    application.messagebox('Quantidade de dias inválido!','',MB_OK+MB_ICONERROR);
    Abort;
  end;

  try

    dados.Geral.Close;
    dados.Geral.SQl.Text := 'UPDATE TABCONTRATO '+
                            '   SET DIASRETORNOANTECIPADO =0'+Trim(cQtdDias) +
                            ' WHERE CODIGO ='+qryRegistrosCODIGOREGISTRO.Text;
    dados.Geral.ExecSQL;

    dados.Geral.Transaction.CommitRetaining;

    application.MessageBox('Processamento Concluído!','',MB_OK+MB_ICONEXCLAMATION);

  except
    on E:Exception do
      application.MessageBox(Pchar('Erro 154857:'+#13+E.message),'ERRO',mb_OK+MB_ICONERROR);
  end;
end;

function TfrmAcompanhaHistoricoProduto.Filtro(): String;
var
  vFiltro : String;
  vCampoData : String;
begin
  if cbPerfil.KeyValue > 0 then
    vFiltro := vFiltro + ' and CODIGOCLIENTE = '+VarToStr(cbPerfil.KeyValue);

  if cbProduto.KeyValue > 0 then
    vFiltro := vFiltro + ' and CODIGOPRODUTO = '+VarToStr(cbProduto.KeyValue);

  if (edtDtInicial.Text <> '') and (edtDtFinal.Text <> '') then
    vFiltro := vFiltro + ' and DATAINICIO between '+
                 QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtInicial.Date))+' and '+
                 QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtFinal.Date))
  else if (edtDtInicial.Text <> '')  then
    vFiltro := vFiltro + ' and DATAINICIO >= '+QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtInicial.Date))
  else if (edtDtFinal.Text <> '')  then
    vFiltro := vFiltro + ' and DATAINICIO <= '+QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtFinal.Date));

  result := vFiltro;
end;

procedure TfrmAcompanhaHistoricoProduto.FormShow(Sender: TObject);
begin
  TOP := 122;
  LEFT := 0;
  try
    qryPerfil.Close;
    qryPerfil.Open;

    qryProduto.Close;
    qryProduto.Open;

    qryPaineis.Close;
    qryPaineis.Open;
  except
    on E:Exception do
      application.MessageBox(Pchar('Erro ao abrir consulta com banco de dados'+E.message),'ERRO',mb_OK+MB_ICONERROR);
  end;
end;

procedure TfrmAcompanhaHistoricoProduto.NovaOS1Click(Sender: TObject);
var
  CodigoOS : Integer;
  ProdutosContrato : array of TProdutosContrato;
  i : Integer;
begin

  try
  
    CodigoOS := 0;

    if Sender = SelecionarOS1 then
        CodigoOS := dados.DigitarValorBD('Selecione a Ordem de Serviço!','TabOS',0,'CAST(CODIGO AS VARCHAR(20))','CODIGO','',' and SITUACAO = 1');

    if grdPainelDBTableView1.Controller.SelectedRowCount = 0 then
    begin
      Application.MessageBox('Nenhum registro selecionado!', '', mb_ok+MB_ICONEXCLAMATION);
      Exit;
    end;

    SetLength(ProdutosContrato,0);

    for i:=0 to grdPainelDBTableView1.Controller.SelectedRowCount - 1 do
    begin

      SetLength(ProdutosContrato,i + 1);

      ProdutosContrato[i].CodigoProduto := grdPainelDBTableView1.Controller.SelectedRows[i].Values[grdPainelDBTableView1CODIGOPRODUTO.Index];
      ProdutosContrato[i].Valor := 0;

    end;

    CodigoOS := Dados.InserirOrdemServico(0,0,ProdutosContrato, 'Ordem de serviço gerada a partir do Histórico de Produtos!',CodigoOS);

  finally
    If Application.FindComponent('frmOrdemServico') = Nil then
           Application.CreateForm(TfrmOrdemServico, frmOrdemServico);

    frmOrdemServico.pubCodigo := CodigoOS;

    frmOrdemServico.Show;
  end;

end;

procedure TfrmAcompanhaHistoricoProduto.qryPaineisBeforeOpen(DataSet: TDataSet);
begin
  qryPaineis.ParamByName('TELA').Value := 'frmAcompanhaHistoricoProduto';
  qryPaineis.ParamByName('COMPONENTE').Value := grdPainelDBTableView1.Name;
end;

procedure TfrmAcompanhaHistoricoProduto.qryRegistrosAfterScroll(
  DataSet: TDataSet);
begin
  cxButton6.Enabled := qryRegistrosTIPO.Text = '2';
end;

procedure TfrmAcompanhaHistoricoProduto.qryRegistrosBeforeOpen(DataSet: TDataSet);
begin
  qryRegistros.SQL.Strings[qryRegistros.SQL.IndexOf('--AND')+1] := Filtro();
end;

end.
