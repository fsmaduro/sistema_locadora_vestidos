unit untCadastroAgenda;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, cxLookAndFeelPainters, RxLookup, DB, IBCustomDataSet, IBQuery,
  StdCtrls, wwdbdatetimepicker, dxGDIPlusClasses, ExtCtrls, cxButtons, Buttons;

type
  TfrmCadastroAgenda = class(TForm)
    Panel2: TPanel;
    cxButton2: TcxButton;
    cxButton3: TcxButton;
    Panel1: TPanel;
    Image1: TImage;
    Label1: TLabel;
    Label38: TLabel;
    edtData: TwwDBDateTimePicker;
    Label37: TLabel;
    edtHora: TwwDBDateTimePicker;
    Label2: TLabel;
    edtDataFim: TwwDBDateTimePicker;
    Label3: TLabel;
    edtHoraFim: TwwDBDateTimePicker;
    dtsPerfil: TDataSource;
    qryPerfil: TIBQuery;
    qryPerfilCODIGO: TIntegerField;
    qryPerfilNOME: TIBStringField;
    qryProduto: TIBQuery;
    qryProdutoCODIGO: TIntegerField;
    qryProdutoDESCRICAO: TIBStringField;
    dtsProduto: TDataSource;
    Label27: TLabel;
    cbPerfil: TRxDBLookupCombo;
    Label4: TLabel;
    cbProduto: TRxDBLookupCombo;
    SpeedButton7: TSpeedButton;
    SpeedButton1: TSpeedButton;
    Label5: TLabel;
    lblMotivoReagendar: TLabel;
    mmDescricao: TMemo;
    mmMotivoReagendar: TMemo;
    procedure FormShow(Sender: TObject);
    procedure cxButton3Click(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure SpeedButton7Click(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure edtHoraExit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    vTempoMinimo : TTime;
    { Private declarations }
  public
    reAgendar : Boolean;
    CodigoAgenda: Integer;
    PedidoAgenda: Integer;
    { Public declarations }
  end;

var
  frmCadastroAgenda: TfrmCadastroAgenda;

implementation

uses untDados, form_cadastro_produto, form_cadastro_perfil;

{$R *.dfm}

procedure TfrmCadastroAgenda.cxButton2Click(Sender: TObject);
var
  Produto: String;
  Perfil,idEvento: String;
begin
  if Application.MessageBox('Deseja Realmente Efetuar Agendamento?','Agendar',MB_YESNO+MB_ICONQUESTION) = IDYES THEN
  begin
    if reAgendar and (mmMotivoReagendar.Text = '') then
    begin
      application.messagebox('Motivo é Obrigatório para Reagendamento','Motivo não Informado',MB_OK+MB_ICONEXCLAMATION);
      Abort;
    end;

    if reAgendar then
    begin
      dados.CancelarAgenda(CodigoAgenda,mmMotivoReagendar.Text);

      Dados.Geral.Close;
      Dados.Geral.SQL.Text := 'SELECT * FROM TABAGENDA WHERE CODIGO =0'+intToStr(CodigoAgenda);
      Dados.Geral.Open;

      Produto  := Dados.Geral.FieldByName('CODIGOPRODUTO').Text;
      Perfil   := Dados.Geral.FieldByName('IDPERFIL').Text;
      idEvento := Dados.Geral.FieldByName('IDEVENTO').Text;
    end
    else
    begin
      Produto := VarToStrDef(cbProduto.KeyValue,'0');
      Perfil := VarToStrDef(cbPerfil.KeyValue,'0');
      idEvento := '0';
    end;

    dados.Agendar(PedidoAgenda,StrToIntDef(Perfil,0),StrToIntDef(Produto,0),edtData.Date,edtDataFim.Date,
                  edtHora.Time,edtHoraFim.Time,mmDescricao.Text,StrToIntDef(idEvento,0));

    Close;
  end;
end;

procedure TfrmCadastroAgenda.cxButton3Click(Sender: TObject);
begin
  if Application.MessageBox('Deseja Realmente Cancelar Agendamento?','Cancelar',MB_YESNO+MB_ICONQUESTION) = IDYES THEN
    Close;
end;

procedure TfrmCadastroAgenda.edtHoraExit(Sender: TObject);
begin
  if (edtDataFim.Date < edtData.Date) then
  begin
    edtDataFim.Date := edtData.Date;
    edtHoraFim.Time := edtHora.Time + vTempoMinimo;
  end
  else if ((edtDataFim.Date = edtData.Date) and (edtHoraFim.Time < (edtHora.Time + vTempoMinimo))) then
    edtHoraFim.Time := edtHora.Time + vTempoMinimo; 
end;

procedure TfrmCadastroAgenda.FormCreate(Sender: TObject);
begin
  edtData.Text := '';
  edtDataFim.Text := '';
  edtHora.Text := '';
  edtHoraFim.Text := '';
  PedidoAgenda := 0;
end;

procedure TfrmCadastroAgenda.FormShow(Sender: TObject);
begin
  lblMotivoReagendar.Visible := reAgendar;
  mmMotivoReagendar.Visible := reAgendar;

  vTempoMinimo := Dados.ValorConfig('frmAgenda','TEMPOMINIMO',StrToTime('00:30:00'),tcHora).vcTime;

  cbPerfil.KeyValue := -1;
  cbProduto.KeyValue := -1;
  mmDescricao.Clear;
  mmMotivoReagendar.Clear;

  try

    qryPerfil.Close;
    qryPerfil.Open;

    qryProduto.Close;
    qryProduto.Open;

  except
    on E:Exception do
      application.MessageBox(Pchar('Erro ao abrir consulta com banco de dados'+E.message),'ERRO',mb_OK+MB_ICONERROR);
  end;
end;

procedure TfrmCadastroAgenda.SpeedButton1Click(Sender: TObject);
begin
  If Application.FindComponent('cadastro_produto') = Nil then
         Application.CreateForm(Tcadastro_produto, cadastro_produto);

  cadastro_produto.ShowModal;

  qryProduto.Close;
  qryProduto.Open;
end;

procedure TfrmCadastroAgenda.SpeedButton7Click(Sender: TObject);
begin
  If Application.FindComponent('cadastro_perfil') = Nil then
         Application.CreateForm(Tcadastro_perfil, cadastro_perfil);

  cadastro_perfil.ShowModal;

  qryPerfil.Close;
  qryPerfil.Open;
end;

end.
