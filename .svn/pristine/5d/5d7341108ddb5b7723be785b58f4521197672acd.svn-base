unit untAcompanhaPerformance;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxStyles, dxSkinsCore, dxSkinsDefaultPainters, dxSkinscxPCPainter,
  cxCustomData, cxGraphics, cxFilter, cxData, cxDataStorage, cxEdit, DB,
  cxDBData, cxGridLevel, cxClasses, cxControls, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid,
  dxGDIPlusClasses, ExtCtrls, IBCustomDataSet, IBQuery, RxLookup, StdCtrls,
  wwdbdatetimepicker, Menus, cxLookAndFeelPainters, cxButtons, cxCheckBox,
  cxGridExportLink, ShellAPI, dxPSGlbl, dxPSUtl, dxPSEngn, dxPrnPg, dxBkgnd,
  dxWrap, dxPrnDev, dxPSCompsProvider, dxPSFillPatterns, dxPSEdgePatterns,
  dxPSCore, dxPScxCommon, dxPScxGrid6Lnk, DBCtrls, cxPC, cxContainer,
  cxTextEdit, cxMaskEdit, cxDropDownEdit, DBTables, rxMemTable,
  cxGridBandedTableView, cxGridDBBandedTableView, rxPlacemnt, TeEngine, Series,
  TeeProcs, Chart, PivotChart_SRC, TeeDBEdit, TeeDBCrossTab;

type
  TfrmAcompanhaPerformance = class(TForm)
    Panel2: TPanel;
    dtsPerfil: TDataSource;
    qryPerfil: TIBQuery;
    qryPerfilCODIGO: TIntegerField;
    qryPerfilNOME: TIBStringField;
    cxButton2: TcxButton;
    cxButton3: TcxButton;
    cxButton5: TcxButton;
    qryComparativoReceita: TIBQuery;
    dtsComparativoReceita: TDataSource;
    SaveDialog2: TSaveDialog;
    Panel3: TPanel;
    cxPageControl1: TcxPageControl;
    cxTabSheet1: TcxTabSheet;
    grdPainel: TcxGrid;
    grdPainelLevel1: TcxGridLevel;
    Panel1: TPanel;
    Image1: TImage;
    cxButton1: TcxButton;
    Label1: TLabel;
    Label2: TLabel;
    cmbAnoFim: TcxComboBox;
    dtsTblComparativoReceita: TDataSource;
    tblComparativoReceita: TMemoryTable;
    qryComparativoReceitaANO: TSmallintField;
    qryComparativoReceitaMES: TSmallintField;
    qryComparativoReceitaVALORTOTAL: TIBBCDField;
    qryComparativoReceitaMEDIAVALOR: TIBBCDField;
    qryComparativoReceitaQTD: TIntegerField;
    grdPainelDBBandedTableView1: TcxGridDBBandedTableView;
    cmbAnoInicio: TcxComboBox;
    FormStorage1: TFormStorage;
    Panel4: TPanel;
    GraficoComparativo: TPivotChart;
    DBCrossTabSource1: TDBCrossTabSource;
    procedure FormActivate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure qryComparativoReceitaBeforeOpen(DataSet: TDataSet);
    procedure cxButton3Click(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure cxButton5Click(Sender: TObject);
    procedure Configuraes1Click(Sender: TObject);
    procedure cxButton1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    vDiasUrgente, vDiasAlerta, vDiasMuitoUrgente: Integer;
    function Filtro(): String;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmAcompanhaPerformance: TfrmAcompanhaPerformance;

implementation

uses untdados, form_cadastro_pedido_agenda, untConsultaProdutos,
  untAgendarPedido, untAcompanhaPedidoAgenda, untOrcamento, untContrato,
  untDtmRelatorios, Funcao, untContratoTerceiros;

const NomeMenu = 'AcompanhamentodePerformance1';

{$R *.dfm}

procedure TfrmAcompanhaPerformance.FormActivate(Sender: TObject);
begin
  Try
    dados.Log(1,copy(Caption,17,length(Caption)));
  except
  End;
end;

procedure TfrmAcompanhaPerformance.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
//  FreeAndNil(tblComparativoReceita);
end;

procedure TfrmAcompanhaPerformance.Configuraes1Click(Sender: TObject);
begin
 dados.ShowConfig(frmAcompanhaPerformance);
end;

procedure TfrmAcompanhaPerformance.cxButton1Click(Sender: TObject);
 var
   QtdAnos, AnoAtual: Integer;
   NomeCampo : String;

 procedure CriarTabelaMemoria;
 var
    i, cont, cAno: Integer;
 begin

   cAno := cmbAnoInicio.EditValue;

   tblComparativoReceita.close;
   tblComparativoReceita.EmptyTable;
   tblComparativoReceita.FieldDefs.Clear;


   tblComparativoReceita.FieldDefs.Add('MES',ftString,50,false);

   for i:=1 to QtdAnos do
   begin

     NomeCampo := '_'+intToStr(cAno);
     tblComparativoReceita.FieldDefs.Add('ANO'+NomeCampo,ftString,50,false);
     tblComparativoReceita.FieldDefs.Add('VALORTOTAL'+NomeCampo,ftCurrency,0,false);
     tblComparativoReceita.FieldDefs.Add('MEDIAVALOR'+NomeCampo,ftCurrency,0,false);
     tblComparativoReceita.FieldDefs.Add('QTD'+NomeCampo,ftInteger,0,false);

     inc(cAno);
     
   end;


   cAno := cmbAnoInicio.EditValue;

   tblComparativoReceita.Open;

   for i:=1 to QtdAnos do
   begin

     NomeCampo := '_'+intToStr(cAno);//+'_'+intToStr(cont);

     tblComparativoReceita.fieldbyname('ANO'+NomeCampo).Visible := False;

     tblComparativoReceita.fieldbyname('MES').DisplayLabel  := 'Mês';

     tblComparativoReceita.fieldbyname('VALORTOTAL'+NomeCampo).DisplayLabel  := 'Valor Total';
     TFloatField(tblComparativoReceita.fieldbyname('VALORTOTAL'+NomeCampo)).DisplayFormat := '#,##0.00';

     tblComparativoReceita.fieldbyname('MEDIAVALOR'+NomeCampo).DisplayLabel  := 'Valor Médio';
     TFloatField(tblComparativoReceita.fieldbyname('MEDIAVALOR'+NomeCampo)).DisplayFormat := '#,##0.00';

     tblComparativoReceita.fieldbyname('QTD'+NomeCampo).DisplayLabel  := 'Quant. Alug.';

     inc(cAno);
   end;


 end;

 procedure PopularTabelaMemoria;
 var
   i, cont, cAno: Integer;
   NomeMesAno : String;
 begin



   for cont:= 1 to 12 do
   begin

     cAno := cmbAnoInicio.EditValue;

     NomeCampo := '_'+intToStr(cAno);

     tblComparativoReceita.Insert;
     tblComparativoReceita.fieldbyname('MES').text := NomeMes(cont);
     tblComparativoReceita.post;

   end;


   While not qryComparativoReceita.Eof do
   begin

     NomeMesAno := NomeMes(qryComparativoReceitaMES.AsInteger);

     NomeCampo := '_'+qryComparativoReceitaANO.Text;

     if tblComparativoReceita.Locate('MES',NomeMesAno,[]) then
     begin
       tblComparativoReceita.edit;
       tblComparativoReceita.fieldbyname('ANO'+NomeCampo).Text := qryComparativoReceitaANO.Text;
       tblComparativoReceita.fieldbyname('VALORTOTAL'+NomeCampo).AsCurrency := qryComparativoReceitaVALORTOTAL.AsCurrency;
       tblComparativoReceita.fieldbyname('MEDIAVALOR'+NomeCampo).AsCurrency := qryComparativoReceitaMEDIAVALOR.AsCurrency;
       tblComparativoReceita.fieldbyname('QTD'+NomeCampo).AsInteger := qryComparativoReceitaQTD.AsInteger;
       tblComparativoReceita.post;
     end;

     qryComparativoReceita.Next;

   end;

 end;

 procedure AtualizarGrid;
 var
   i, x, y, cAno : Integer;
 begin

   grdPainelDBBandedTableView1.BeginUpdate;
   grdPainelDBBandedTableView1.ClearItems;
   grdPainelDBBandedTableView1.Bands.Clear;
   grdPainelDBBandedTableView1.DataController.CreateAllItems;

   cAno := cmbAnoInicio.EditValue;

   grdPainelDBBandedTableView1.Bands.Add;
   grdPainelDBBandedTableView1.Bands[0].Caption := '';
   grdPainelDBBandedTableView1.Columns[0].Position.BandIndex := 0;
   y := 1;

   for i:=1 to QtdAnos do
   begin

     grdPainelDBBandedTableView1.Bands.Add;
     grdPainelDBBandedTableView1.Bands[i].Caption := intTostr(cAno);

     for x:=1 to 4 do
     begin

       grdPainelDBBandedTableView1.Columns[y].Position.BandIndex := grdPainelDBBandedTableView1.Bands[i].ID;
       grdPainelDBBandedTableView1.Columns[y].Width := 50;

       with grdPainelDBBandedTableView1.DataController.Summary.FooterSummaryItems do
       begin
         Case x of
           2: begin
                Add(grdPainelDBBandedTableView1.Columns[y],spFooter,skSum,'#,##0.00');
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupKind := skSum;
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupFormat := '#,##0.00';
              end;
           3: begin
                Add(grdPainelDBBandedTableView1.Columns[y],spFooter,skAverage,'#,##0.00');
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupKind := skAverage;
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupFormat := '#,##0.00';
              end;
           4: begin
                Add(grdPainelDBBandedTableView1.Columns[y],spFooter,skSum,'');
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupKind := skSum;
                grdPainelDBBandedTableView1.Columns[y].Summary.GroupFormat := '';
              end;
         End;
       end;

       inc(y);
       
     end;

     inc(cAno);
     
   end;

   grdPainelDBBandedTableView1.Columns[0].Width := 150;

   grdPainelDBBandedTableView1.EndUpdate;

 end;

 procedure PreencherGrafico;
 var
   i, cAno:Integer;
   Serie : TBarSeries;
   Campo: String;
   Valor: Currency;
 begin

   cAno := cmbAnoInicio.EditValue;


   for i := 0 to GraficoComparativo.SeriesCount - 1  do
     GraficoComparativo.Series[i].Destroy;

   for i:=1 to QtdAnos do
   begin
   
     GraficoComparativo.AddSeries(TBarSeries.Create(nil));

     With GraficoComparativo do
     begin

       Series[GraficoComparativo.SeriesCount - 1].Name := 'Serie_'+intToStr(cAno);
       Series[GraficoComparativo.SeriesCount - 1].ColorEachPoint := True;
       Series[GraficoComparativo.SeriesCount - 1].Marks.Callout.Brush.Color := clBlack ;
       Series[GraficoComparativo.SeriesCount - 1].Marks.Callout.Length := 8;
       Series[GraficoComparativo.SeriesCount - 1].Marks.Visible := True;
       Series[GraficoComparativo.SeriesCount - 1].SeriesColor := clBlue;
       Series[GraficoComparativo.SeriesCount - 1].ValueFormat := '0' ;
       Series[GraficoComparativo.SeriesCount - 1].XValues.Name := 'Bar';
       Series[GraficoComparativo.SeriesCount - 1].YValues.Name := 'Y' ;
       Series[GraficoComparativo.SeriesCount - 1].Marks.Style := smsValue;

       Series[GraficoComparativo.SeriesCount - 1].Add(cAno,intToStr(cAno) ) ;

     end;

     inc(cAno);

   end;


//   tblComparativoReceita.First;
//
//   While not tblComparativoReceita.Eof do
//   begin
//
//     Serie := TBarSeries(GraficoComparativo.FindComponent('Serie_'+tblComparativoReceita.FieldByName('MES').Text));
//
//     Serie.Add(tblComparativoReceita.FieldByName('VALORTOTAL_'+tblComparativoReceita.FieldByName('ANO').Text).AsCurrency,tblComparativoReceita.FieldByName('ANO').Text ) ;
//
//     tblComparativoReceita.Next;
//   end;

 end;

begin


  try
    QtdAnos := (cmbAnoFim.EditValue - cmbAnoInicio.EditValue) + 1;
  except
    ShowMessage('Informe o período!');
    Abort;
  end;

  if QtdAnos < 1 then
  begin
    ShowMessage('Período inválido!');
    Abort;
  end;

  qryComparativoReceita.Close;
  qryComparativoReceita.Open;

  CriarTabelaMemoria;
  PopularTabelaMemoria;
  AtualizarGrid;
  PreencherGrafico;

end;

procedure TfrmAcompanhaPerformance.cxButton2Click(Sender: TObject);
begin
  ImprimirGrid(grdPainel,'Painel de Performance');
end;

procedure TfrmAcompanhaPerformance.cxButton3Click(Sender: TObject);
begin
  ExportarGrid(grdPainel);
end;

procedure TfrmAcompanhaPerformance.cxButton5Click(Sender: TObject);
begin
  Close;
end;

function TfrmAcompanhaPerformance.Filtro(): String;
var
  vFiltro : String;
  vCampoData : String;
begin
//  if cbPerfil.KeyValue > 0 then
//    vFiltro := vFiltro + ' and x.codigocliente = '+VarToStr(cbPerfil.KeyValue);
//
//  if (edtDtInicial.Text <> '') and (edtDtFinal.Text <> '') then
//    vFiltro := vFiltro + ' and x.data between '+
//                 QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtInicial.Date))+' and '+
//                 QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtFinal.Date))
//  else if (edtDtInicial.Text <> '')  then
//    vFiltro := vFiltro + ' and x.data >= '+QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtInicial.Date))
//  else if (edtDtFinal.Text <> '')  then
//    vFiltro := vFiltro + ' and x.data <= '+QuotedStr(FormatDateTime('mm/dd/yyyy', edtDtFinal.Date));
//
//  if rgTipo.ItemIndex = 0 then
//    vFiltro := vFiltro + ' and x.tipo = ''próprio'' '
//  else
//    vFiltro := vFiltro + ' and x.tipo = ''terceiros'' ';

  result := vFiltro;
end;

procedure TfrmAcompanhaPerformance.FormShow(Sender: TObject);
begin
  TOP := 122;
  LEFT := 0;
  try
    qryPerfil.Close;
    qryPerfil.Open;
  except
    on E:Exception do
      application.MessageBox(Pchar('Erro ao abrir consulta com banco de dados'+E.message),'ERRO',mb_OK+MB_ICONERROR);
  end;
end;

procedure TfrmAcompanhaPerformance.qryComparativoReceitaBeforeOpen(DataSet: TDataSet);
begin
  qryComparativoReceita.SQL.Strings[qryComparativoReceita.SQL.IndexOf('--AND')+1] := ' AND X.ANO BETWEEN '+cmbAnoInicio.Text + ' AND '+cmbAnoFim.Text;
end;

end.
